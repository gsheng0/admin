#!/usr/bin/bash
LEEWAY_SECONDS=5
VALID_APPS="svc notes bird rgscalc wfmon flappy"

########## TODO: feature: auto restart 

## -----------------------------------------------------------------------------------
## is_running
## -----------------------------------------------------------------------------------
function is_running {
	if [[ -e $pid_file ]] ; then 
		if ps -ef | grep $(cat $pid_file) | grep -v grep ; then 
			return 0
		else 
			return 1
		fi
	else
		return 1
	fi
}
## -----------------------------------------------------------------------------------
## get_spawn_pid - $1 pid  
##
## e.g. npm start => react-scripts start => node react-scripts => node react-scripts/scripts/start.js
## 10574       1  npm start
## 10591   10574  sh -c export PORT=2001 && react-scripts start
## 10592   10591  node /home/gsapp/ps-games/v2flappy/node_modules/.bin/react-scripts start
## 10599   10592  /usr/bin/node /home/gsapp/ps-games/v2flappy/node_modules/react-scripts/scripts/start.js
##
## -----------------------------------------------------------------------------------
function get_spawn_pid {
  typeset parent_pid=${1}
  typeset curr_bottom_pid=$(lps $parent_pid | awk '{print $2}' |  tail -1)
   
} 
## -----------------------------------------------------------------------------------
## validate_pid
## -----------------------------------------------------------------------------------
function validate_pid {
	start_pid=${pid}
	while true; do
		echo sleep $LEEWAY_SECONDS seconds then check if anything spawned
		sleep $LEEWAY_SECONDS 
		top_pid=$(lps ${start_pid} | awk '{print $2}' | head -1)
		bottom_pid=$(lps ${start_pid} | awk '{print $2}' | tail -1)
		if [[ "${top_pid}" == "${bottom_pid}" ]]; then
			echo "no spawned process seen, stopping polling......"
			break;
		else
			echo "got spawn_pid=${bottom_pid} from pid=${pid}"
			start_pid=${bottom_pid}
		fi; 
  	done 
	echo ${pid} ==> ${bottom_pid} $(pwd) ${pid_file}
	if [[ "${top_pid}" == "" ]]; then
		echo "unable to start ${app_name}";
	else
		echo "${app_name} started with effectve pid=${bottom_pid}"
		echo ${bottom_pid} > ${pwd}/${pid_file}
	fi
}
## -----------------------------------------------------------------------------------
## get_port
## -----------------------------------------------------------------------------------
function get_port { 
 	case $app_name in 
		bird 	) export PORT=3001 ;;
		notes 	) export PORT=3002 ;;
		rgscalc ) export PORT=3003 ;;
		wfmon	) export PORT=3004 ;;
		flappy	) export PORT=2001 ;;
	esac
}
## -----------------------------------------------------------------------------------
## start_node_app_use_serve 
## -----------------------------------------------------------------------------------
function start_node_app_use_serve {
	get_port
	if [[ -e ${currdir}/$app_name ]]; then 
		serve -s $app_name -l $PORT > ${log_file} 2>&1 &
		pid=$!
		validate_pid 
	else
		echo "$app_name does not exist."
		exit 1
	fi
}
## -----------------------------------------------------------------------------------
## start_node_app_use_npm 
## -----------------------------------------------------------------------------------
function start_node_app_use_npm {
	NODE_ENV=production
	get_port
	if cd $app_name ; then 
		npm start > ${log_file} 2>&1 &
		pid=$!
		cd - > /dev/null
		validate_pid 
	else
		echo "$app_name does not exist."
		exit 1
	fi
}
## -----------------------------------------------------------------------------------
## start_services 
## -----------------------------------------------------------------------------------
function start_services {
	if [[ -e svc/services.jar ]]; then 
		. svc.env
		java -jar $app_name/services.jar > $log_file 2>&1 &
		pid=$!
		validate_pid $pid
	else
		echo "services does not exist."
		exit 1
	fi
}
## -----------------------------------------------------------------------------------
##			M A I N 
## -----------------------------------------------------------------------------------
function main {
  pid_file=${currdir}/${app_name}.pid
  log_file=${currdir}/${app_name}.log
  echo "app_name=$app_name pid_file=$pid_file log_file=$log_file"

  case $action in 
	start ) if is_running ; then 
			echo "$app_name is already running"
		else
			case $app_name in 
				notes | bird | rgscalc | wfmon | flappy ) 
					start_node_app_use_serve ;;	
			#	flappy ) 
			#		start_node_app_use_npm ;;	
				svc ) 
					start_services ;; 
				* ) 	
					echo "valid apps: $VALID_APPS" 
					exit 1
			esac
		fi
	;;
	status ) if is_running ; then 
			echo "-------------------------------"
			echo "running."
		else
			echo "-------------------------------"
			echo "NOT running."
		fi
		echo "------------------------------------------------------------------------"
	;;
	stop )	if is_running ; then 
			echo "killing $app_name processes......"
			ps -ef | grep $(cat $pid_file) | awk '{ print $2 }' | xargs kill | tee
			sleep $LEEWAY_SECONDS
			if is_running ; then 
				echo 'unable to kill......'
			else
				rm -f $pid_file
			fi
		else
			echo "$app_name is NOT running."
		fi
	;;
	bounce ) action=stop
		 main
		 action=start
		 main
		 ;; 
	* ) 	echo "valid actions: start | status | stop | bounce"
		exit 1
	;;
  esac
}

## 
## R U N 
##

currdir=$(pwd)
action=${1?missing action}
app_name=${2-all}

case $app_name in 
	all )
		for app in $VALID_APPS ; do
			app_name=$app
			##echo main $action $app_name
			main 
		done
		;;
	* ) 
		if echo $VALID_APPS | grep $app_name > /dev/null; then
			##echo main $action $app_name
			main 
		else
			echo "valid apps are: $VALID_APPS"
		fi
		;;
esac

if echo $action | grep status > /dev/null ; then 
	netstat -tnlp | egrep "node|java" | awk '{print $1, $4, $7}'
fi

